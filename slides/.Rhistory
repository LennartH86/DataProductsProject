coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
dim(trainingSet)
names(trainingSet)
```
In a next step we need to make the classes variable a factor variable and we will split the training dataset again into a training and test dataset.
```{r}
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(D$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
```
We will center and scale the left predictors in the training dataset, apply the centering and scaling to the test dataset and check vor variables with zero variance.
```{r}
X <- trainingSetTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
trainingSetTrainCS <- data.table(data.frame(classe = trainingSetTrain[, classe], XCS))
X <- trainingSetTest[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
trainingSetTestCS <- data.table(data.frame(classe = trainingSetTest[, classe], XCS))
nzv <- nearZeroVar(trainingSetTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
```
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
dim(trainingSet)
names(trainingSet)
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(D$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNAsAre
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
#dim(trainingSet)
#names(trainingSet)
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(D$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(trainingSet$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
X <- trainingSetTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
trainingSetTrainCS <- data.table(data.frame(classe = trainingSetTrain[, classe], XCS))
X <- trainingSetTest[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
trainingSetTestCS <- data.table(data.frame(classe = trainingSetTest[, classe], XCS))
nzv <- nearZeroVar(trainingSetTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
install.packages("randomForest")
install.packages("randomForest")
detach("package:randomForest", unload=TRUE)
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
#dim(trainingSet)
#names(trainingSet)
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
#trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(trainingSet$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
X <- trainingSetTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
trainingSetTrainCS <- data.table(data.frame(classe = trainingSetTrain[, classe], XCS))
X <- trainingSetTest[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
trainingSetTestCS <- data.table(data.frame(classe = trainingSetTest[, classe], XCS))
nzv <- nearZeroVar(trainingSetTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
require(randomForest)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
require(randomForest)
require(e1071)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
library(e1071)
install.packages("e1071")
library(e1071)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
require(parallel)
require(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
install.packages(parallel)
install.packages("parallel")
install.packages("parallel")
install.packages("doparallel")
install.packages("doParallel")
require(parallel)
require(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
require(randomForest)
require(e1071)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
stopCluster(cl)
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
testSetCS <- predict(preProc, testSet[, predCandidates, with=FALSE])
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
pml_write_files = function(x){
n = length(x)
path <- "predictionAssignment_files/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(hat)
pml_write_files = function(x){
n = length(x)
path <- "predictionAssignment_files/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
pml_write_files = function(x){
n = length(x)
path <- "/"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
load(file="trainingModel.RData", verbose=TRUE)
testSetCS <- predict(preProc, testSet[, predCandidates, with=FALSE])
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
testSetCS <- predict(preProc, testSet[, predCandidates], with=FALSE)
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
pml_write_files = function(x){
n = length(x)
path <- "/"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
pml_write_files = function(x){
n = length(x)
path <- "/"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
pml_write_files = function(x){
n = length(x)
path <- ""
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
prediction
test <- as.Character(prediction)
bob[] <- lapply(prediction, as.character)
bob <- lapply(prediction, as.character)
bob
pml_write_files(lapply(prediction, as.character))
pml_write_files = function(x){
n = length(x)
path <- "P:/"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(lapply(prediction, as.character))
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
library("e1071", lib.loc="P:/Programme/RStudio/R-3.2.0/library")
library("caret", lib.loc="P:/Programme/RStudio/R-3.2.0/library")
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
library("data.table", lib.loc="P:/Programme/RStudio/R-3.2.0/library")
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
#dim(trainingSet)
#names(trainingSet)
```
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
#dim(trainingSet)
#names(trainingSet)
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
#trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(trainingSet$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
X <- trainingSetTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
trainingSetTrainCS <- data.table(data.frame(classe = trainingSetTrain[, classe], XCS))
X <- trainingSetTest[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
trainingSetTestCS <- data.table(data.frame(classe = trainingSetTest[, classe], XCS))
nzv <- nearZeroVar(trainingSetTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
load(file="trainingModel.RData", verbose=TRUE)
testSetCS <- predict(preProc, testSet[, predCandidates], with=FALSE)
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
load(file="trainingModel.RData", verbose=TRUE)
testSetCS <- predict(preProc, testSet[, predCandidates, with=FALSE])
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
varImp(trainingModel)
trainingModel$finalModel
?varImp
varImp(trainingModel)
library("installr", lib.loc="P:/Programme/RStudio/R-3.2.0/library")
updateR()
library("devtools", lib.loc="P:/Programme/RStudio/R-3.2.1/library")
install.packages("Rtools")
find_rtools()
find_rtools()
library("devtools", lib.loc="P:/Programme/RStudio/R-3.2.1/library")
install.github()
install_github("rstudio/shinyapps")
library("slidifyLibraries", lib.loc="P:/Programme/RStudio/R-3.2.1/library")
library("slidify", lib.loc="P:/Programme/RStudio/R-3.2.1/library")
setwd("P:/DataScience/RFiles/DataProductsProject/slides")
slidify(("index.Rmd"))
slidify(("index.Rmd"))
slidify(("index.Rmd"))
options(gvis.plot.tag="chart")
require(googleVis)
library(RCurl)
url <- "https://raw.github.com/LennartH86/DataProductsProject/master/data/GoalsEuroCup.csv"
data <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
data <- read.csv(text=data, sep=";")
dataminmax = data.frame(Country=rep(c("Min", "Max"),14),
Year=sort(rep(seq(1960,2012,4),2)),
Goals=rep(c(0, 14),14),
Winner=rep(NA,14),
Runnerup=rep(NA,14))
data<- rbind(data, dataminmax)
myData <- subset(data, (2012 > (2012-1)) & (2012 < (2012+1)) & !is.na(Goals))
g <- gvisGeoChart(myData, locationvar="Country", colorvar="Goals",
options=list(region='150', displayMode="regions",
resolution="countries", width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}",
magnifyingGlass="{enable: true, zoomFactor: 40}",
datalessRegionColor="white"))
aggregate(Goals ~ Year, data= data, FUN= sum)
highscorer <- aggregate(Goals ~ Country, data= data, FUN= sum)
winner <- highscorer[order(-highscorer$Goals),][1,]
runnerup <- highscorer[order(-highscorer$Goals),][2,]
third <- highscorer[order(-highscorer$Goals),][3,]
```
1. `r winner[1]`  - `r winner[2]`
2. `r runnerup[1]`  - `r runnerup[2]`
3. `r third[1]`  - `r third[2]`
highscorer <- aggregate(Goals ~ Country, data= data, FUN= sum)
winner <- highscorer[order(-highscorer$Goals),][1,]
runnerup <- highscorer[order(-highscorer$Goals),][2,]
third <- highscorer[order(-highscorer$Goals),][3,]
winner[1]
slidify(("index.Rmd"))
url <- "https://raw.github.com/LennartH86/DataProductsProject/master/data/GoalsEuroCup.csv"
data <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
data <- read.csv(text=data, sep=";")
dataminmax = data.frame(Country=rep(c("Min", "Max"),14),
Year=sort(rep(seq(1960,2012,4),2)),
Goals=rep(c(0, 14),14),
Winner=rep(NA,14),
Runnerup=rep(NA,14))
data<- rbind(data, dataminmax)
View(data)
myData <- subset(data, (2012 > (2012-1)) & (2012 < (2012+1)) & !is.na(Goals))
g <- gvisGeoChart(myData, locationvar="Country", colorvar="Goals",
options=list(region='150', displayMode="regions",
resolution="countries", width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}",
magnifyingGlass="{enable: true, zoomFactor: 40}",
datalessRegionColor="white"))
unique(data$Year)
aggregate(Goals ~ Year, data= data, FUN= sum)
highscorer <- aggregate(Goals ~ Country, data= data, FUN= sum)
winner <- highscorer[order(-highscorer$Goals),][1,]
runnerup <- highscorer[order(-highscorer$Goals),][2,]
third <- highscorer[order(-highscorer$Goals),][3,]
winner[1
]
winner[2]
View(highscorer)
options(gvis.plot.tag="chart")
require(googleVis)
library(RCurl)
url <- "https://raw.github.com/LennartH86/DataProductsProject/master/data/GoalsEuroCup.csv"
data <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
data <- read.csv(text=data, sep=";")
dataminmax = data.frame(Country=rep(c("Min", "Max"),14),
Year=sort(rep(seq(1960,2012,4),2)),
Goals=rep(c(0, 14),14),
Winner=rep(NA,14),
Runnerup=rep(NA,14))
data1<- rbind(data, dataminmax)
myData <- subset(data1, (2012 > (2012-1)) & (2012 < (2012+1)) & !is.na(Goals))
g <- gvisGeoChart(myData, locationvar="Country", colorvar="Goals",
options=list(region='150', displayMode="regions",
resolution="countries", width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}",
magnifyingGlass="{enable: true, zoomFactor: 40}",
datalessRegionColor="white"))
slidify(("index.Rmd"))
View(data)
slidify(("index.Rmd"))
options(gvis.plot.tag="chart")
require(googleVis)
library(RCurl)
url <- "https://raw.github.com/LennartH86/DataProductsProject/master/data/GoalsEuroCup.csv"
data <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
data <- read.csv(text=data, sep=";")
dataminmax = data.frame(Country=rep(c("Min", "Max"),14),
Year=sort(rep(seq(1960,2012,4),2)),
Goals=rep(c(0, 14),14),
Winner=rep(NA,14),
Runnerup=rep(NA,14))
data1<- rbind(data, dataminmax)
myData <- subset(data1, (2012 > (2012-1)) & (2012 < (2012+1)) & !is.na(Goals))
g <- gvisGeoChart(myData, locationvar="Country", colorvar="Goals",
options=list(region='150', displayMode="regions",
resolution="countries", width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}",
magnifyingGlass="{enable: true, zoomFactor: 40}",
datalessRegionColor="white"))
slidify(("index.Rmd"))
options(gvis.plot.tag="chart")
require(googleVis)
library(RCurl)
url <- "https://raw.github.com/LennartH86/DataProductsProject/master/data/GoalsEuroCup.csv"
data <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
data <- read.csv(text=data, sep=";")
dataminmax = data.frame(Country=rep(c("Min", "Max"),14),
Year=sort(rep(seq(1960,2012,4),2)),
Goals=rep(c(0, 14),14),
Winner=rep(NA,14),
Runnerup=rep(NA,14))
data1<- rbind(data, dataminmax)
myData <- subset(data1, (2012 > (2012-1)) & (2012 < (2012+1)) & !is.na(Goals))
g <- gvisGeoChart(myData, locationvar="Country", colorvar="Goals",
options=list(region='150', displayMode="regions",
resolution="countries", width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}",
magnifyingGlass="{enable: true, zoomFactor: 40}",
datalessRegionColor="white"))
unique(data$Year)
aggregate(Goals ~ Year, data= data, FUN= sum)
highscorer <- aggregate(Goals ~ Country, data= data, FUN= sum)
winner <- highscorer[order(-highscorer$Goals),][1,]
runnerup <- highscorer[order(-highscorer$Goals),][2,]
third <- highscorer[order(-highscorer$Goals),][3,]
winner[1]
winner[2]
slidify(("index.Rmd"))
slidify(("index.Rmd"))
