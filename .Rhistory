adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
loh(0)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
names(adData)
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.package("installr")
package.install("installr")
install.packages("installr")
library(installr)
installr
installr()
library(installr)
installr()
```{r}
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
```
require(data.table)
require(RCurl)
setInternet2(TRUE)
url <- getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
trainingSet <- read.csv(url)
url <- getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
testSet <- read.csv(url)
url <- getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
head(testSEt)
head(testSet)
head(trainingSet)
testSet[1-5,1-5]
testSet[1,1]
testSet[1,1]
testSet[1,]
testSet[1,1-5]
testSet[1,c(1-5)]
testSet[1,c(1,2,3,4,5)]
trainingSet[1,c(1,2,3,4,5)]
trainingSet <- read.csv(url)
url <- getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
url <- getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv" ,ssl.verifypeer = FALSE)
trainingSet <- read.csv(url)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
coloumsWhereNAsAre
!coloumsWhereNAsA
!coloumsWhereNAsAre
# Practical Machine Learning: Project
Welcome to my write up of the Practical Machine Learning Project. This time we would like to build a algorithm to predict the manner in which participants did excercises which thy tracked with their Jawbone Up, Nike FuelBand, Fitbit or other divices. While building the algorithm I will describe how I build the altorithm, how I use cross validation, what I think the expected out of sample error is and why I made the choices I made.
## Data Preparation
Let's start with the data. We will download and prepare it a little bit. The data is provided devided in training and test data sets.
```{r}
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
```
In another step we will exclude any variables from the model and training dataset which do have NA values.
```{r}
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
dim(trainingSet)
names(trainingSet)
```
In a next step we need to make the classes variable a factor variable and we will split the training dataset again into a training and test dataset.
```{r}
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(D$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
```
We will center and scale the left predictors in the training dataset, apply the centering and scaling to the test dataset and check vor variables with zero variance.
```{r}
X <- trainingSetTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
trainingSetTrainCS <- data.table(data.frame(classe = trainingSetTrain[, classe], XCS))
X <- trainingSetTest[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
trainingSetTestCS <- data.table(data.frame(classe = trainingSetTest[, classe], XCS))
nzv <- nearZeroVar(trainingSetTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
```
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
dim(trainingSet)
names(trainingSet)
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(D$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNAsAre
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
#dim(trainingSet)
#names(trainingSet)
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(D$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(trainingSet$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
X <- trainingSetTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
trainingSetTrainCS <- data.table(data.frame(classe = trainingSetTrain[, classe], XCS))
X <- trainingSetTest[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
trainingSetTestCS <- data.table(data.frame(classe = trainingSetTest[, classe], XCS))
nzv <- nearZeroVar(trainingSetTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
install.packages("randomForest")
install.packages("randomForest")
detach("package:randomForest", unload=TRUE)
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
#dim(trainingSet)
#names(trainingSet)
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
#trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(trainingSet$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
trainingSetTest <- trainingSet[-toIncludeInTrainingSet[[1]]]
X <- trainingSetTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
trainingSetTrainCS <- data.table(data.frame(classe = trainingSetTrain[, classe], XCS))
X <- trainingSetTest[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
trainingSetTestCS <- data.table(data.frame(classe = trainingSetTest[, classe], XCS))
nzv <- nearZeroVar(trainingSetTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
require(randomForest)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
require(randomForest)
require(e1071)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
library(e1071)
install.packages("e1071")
library(e1071)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
require(parallel)
require(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
install.packages(parallel)
install.packages("parallel")
install.packages("parallel")
install.packages("doparallel")
install.packages("doParallel")
require(parallel)
require(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
require(randomForest)
require(e1071)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=trainingSetTrainCS, method=method))
stopCluster(cl)
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
testSetCS <- predict(preProc, testSet[, predCandidates, with=FALSE])
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
pml_write_files = function(x){
n = length(x)
path <- "predictionAssignment_files/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(hat)
pml_write_files = function(x){
n = length(x)
path <- "predictionAssignment_files/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
pml_write_files = function(x){
n = length(x)
path <- "/"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
load(file="trainingModel.RData", verbose=TRUE)
testSetCS <- predict(preProc, testSet[, predCandidates, with=FALSE])
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
testSetCS <- predict(preProc, testSet[, predCandidates], with=FALSE)
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
pml_write_files = function(x){
n = length(x)
path <- "/"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
pml_write_files = function(x){
n = length(x)
path <- "/"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
pml_write_files = function(x){
n = length(x)
path <- ""
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
prediction
test <- as.Character(prediction)
bob[] <- lapply(prediction, as.character)
bob <- lapply(prediction, as.character)
bob
pml_write_files(lapply(prediction, as.character))
pml_write_files = function(x){
n = length(x)
path <- "P:/"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(lapply(prediction, as.character))
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
library("e1071", lib.loc="P:/Programme/RStudio/R-3.2.0/library")
library("caret", lib.loc="P:/Programme/RStudio/R-3.2.0/library")
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
library("data.table", lib.loc="P:/Programme/RStudio/R-3.2.0/library")
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingSet <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testSet <- fread(url)
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
#dim(trainingSet)
#names(trainingSet)
```
coloumsWhereNAsAre <- sapply(testSet, function (x) any(is.na(x) | x == ""))
coloumsWhereNoNAsAre <- !coloumsWhereNAsAre & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(coloumsWhereNAsAre))
predCandidates <- names(coloumsWhereNAsAre)[coloumsWhereNoNAsAre]
#predCandidates
predictors <- c("classe", predCandidates)
trainingSet <- trainingSet[, predictors, with=FALSE]
#dim(trainingSet)
#names(trainingSet)
trainingSet <- trainingSet[, classe := factor(trainingSet[, classe])]
#trainingSet[, .N, classe]
require(caret)
set.seed(1337)
toIncludeInTrainingSet <- createDataPartition(trainingSet$classe, p=0.6)
trainingSetTrain <- trainingSet[toIncludeInTrainingSet[[1]]]
X <- trainingSetTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
trainingSetTrainCS <- data.table(data.frame(classe = trainingSetTrain[, classe], XCS))
X <- trainingSetTest[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
trainingSetTestCS <- data.table(data.frame(classe = trainingSetTest[, classe], XCS))
nzv <- nearZeroVar(trainingSetTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
prediction <- predict(trainingModel, trainingSetTrainCS)
confusionMatrix(prediction, trainingSetTrainCS[, classe])
prediction <- predict(trainingModel, trainingSetTestCS)
confusionMatrix(prediction, trainingSetTestCS[, classe])
varImp(trainingModel)
trainingModel$finalModel
save(trainingModel, file="trainingModel.RData")
load(file="trainingModel.RData", verbose=TRUE)
testSetCS <- predict(preProc, testSet[, predCandidates], with=FALSE)
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
load(file="trainingModel.RData", verbose=TRUE)
testSetCS <- predict(preProc, testSet[, predCandidates, with=FALSE])
prediction <- predict(trainingModel, testSetCS)
testSet <- cbind(prediction , testSet)
subset(testSet, select=names(testSet)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(testSet), invert=TRUE)])
varImp(trainingModel)
trainingModel$finalModel
?varImp
varImp(trainingModel)
library("installr", lib.loc="P:/Programme/RStudio/R-3.2.0/library")
updateR()
library("devtools", lib.loc="P:/Programme/RStudio/R-3.2.1/library")
install.packages("Rtools")
find_rtools()
find_rtools()
library("devtools", lib.loc="P:/Programme/RStudio/R-3.2.1/library")
install.github()
install_github("rstudio/shinyapps")
setwd("P:/DataScience/RFiles/DataProductsProject")
library("shiny", lib.loc="P:/Programme/RStudio/R-3.2.1/library")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
setwd("P:/DataScience/RFiles/DataProductsProject")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
runApp("EuroGoalsApp")
library("shinyapps", lib.loc="P:/Programme/RStudio/R-3.2.1/library")
deployApp("EuroGoalsApp", appName = "EuroGoalsApp")
deployApp("EuroGoalsApp", appName = "EuroGoalsApp")
